const WebSocket = require('ws');
const http = require('http');

// –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
const server = http.createServer();

// –°–æ–∑–¥–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä
const wss = new WebSocket.Server({ server });

// –•—Ä–∞–Ω–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —á–∞—Ç—ã
const connectedUsers = new Map(); // ws -> { userId, chatIds: Set }
const chatRooms = new Map(); // chatId -> Set of ws

console.log('üöÄ WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...');

wss.on('connection', (ws, req) => {
  console.log('üí¨ –ù–æ–≤–æ–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
  
  let userId = null;
  let userChatIds = new Set();
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  ws.on('message', (data) => {
    try {
      const message = JSON.parse(data.toString());
      console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
      
      switch (message.type) {
        case 'auth':
          // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          userId = message.data.user_id;
          
          // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö
          connectedUsers.set(ws, { userId, chatIds: userChatIds });
          
          console.log(`üîê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω`);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
          ws.send(JSON.stringify({
            type: 'auth_success',
            data: { user_id: userId }
          }));
          break;
          
        case 'join_chat':
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ —á–∞—Ç—É
          const chatId = message.data.chat_id;
          userChatIds.add(chatId);
          
          // –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É —á–∞—Ç–∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
          if (!chatRooms.has(chatId)) {
            chatRooms.set(chatId, new Set());
          }
          chatRooms.get(chatId).add(ws);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
          connectedUsers.set(ws, { userId, chatIds: userChatIds });
          
          console.log(`üîó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É ${chatId}`);
          break;
          
        case 'leave_chat':
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–¥–∞–µ—Ç —á–∞—Ç
          const leaveChatId = message.data.chat_id;
          userChatIds.delete(leaveChatId);
          
          // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–Ω–∞—Ç—ã —á–∞—Ç–∞
          if (chatRooms.has(leaveChatId)) {
            chatRooms.get(leaveChatId).delete(ws);
            
            // –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –ø—É—Å—Ç–∞, —É–¥–∞–ª—è–µ–º –µ—ë
            if (chatRooms.get(leaveChatId).size === 0) {
              chatRooms.delete(leaveChatId);
            }
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
          connectedUsers.set(ws, { userId, chatIds: userChatIds });
          
          console.log(`üîå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç ${leaveChatId}`);
          break;
          
        case 'new_message':
          // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —á–∞—Ç–∞, –∫—Ä–æ–º–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
          const messageChatId = message.data.chat_id;
          const chatRoom = chatRooms.get(messageChatId);
          
          if (chatRoom) {
            const messageToSend = JSON.stringify({
              type: 'new_message',
              data: message.data
            });
            
            chatRoom.forEach((client) => {
              // –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
              if (client.readyState === WebSocket.OPEN && client !== ws) {
                client.send(messageToSend);
              }
            });
            
            console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${messageChatId} (–∏—Å–∫–ª—é—á–∞—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è)`);
          }
          break;
          
        case 'typing_status':
          // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—á–∞—Ç–∞–Ω–∏—è
          const typingChatId = message.data.chat_id;
          const typingRoom = chatRooms.get(typingChatId);
          
          if (typingRoom) {
            const typingMessage = JSON.stringify({
              type: 'user_typing',
              data: message.data
            });
            
            typingRoom.forEach((client) => {
              if (client.readyState === WebSocket.OPEN && client !== ws) {
                client.send(typingMessage);
              }
            });
            
            console.log(`‚å®Ô∏è –°—Ç–∞—Ç—É—Å –ø–µ—á–∞—Ç–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç ${typingChatId}`);
          }
          break;
          
        default:
          console.log('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', message.type);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  });
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
  ws.on('close', () => {
    console.log(`üîå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ—Ç–∫–ª—é—á–∏–ª—Å—è`);
    
    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Å–µ—Ö —á–∞—Ç–æ–≤
    if (userChatIds.size > 0) {
      userChatIds.forEach(chatId => {
        if (chatRooms.has(chatId)) {
          chatRooms.get(chatId).delete(ws);
          
          // –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –ø—É—Å—Ç–∞, —É–¥–∞–ª—è–µ–º –µ—ë
          if (chatRooms.get(chatId).size === 0) {
            chatRooms.delete(chatId);
          }
        }
      });
    }
    
    connectedUsers.delete(ws);
  });
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
  ws.on('error', (error) => {
    console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
  });
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
const PORT = process.env.PORT || 8080;
server.listen(PORT, () => {
  console.log(`üöÄ WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ws://localhost:${PORT}`);
});

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä...');
  wss.close(() => {
    console.log('‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
  });
});
